@startuml





/' Objects '/

class Client {
}


class Server {
	+startGame() : void
}


namespace PacMan {
	namespace Utils {
		abstract class ILogger {
			+ILogger(const std::string& scopeName, LogLevel logLevel)
			+~ILogger()
			+operator==(const ILogger& other) : bool {query}
			#m_logLevel : const LogLevel
			#m_scopeName : const std::string
			-{static} s_loggers : static std::unordered_set<ILogger*>
			+{abstract} logCritical(const std::string& message) : void
			+{abstract} logDebug(const std::string& message) : void
			+{abstract} logError(const std::string& message) : void
			+{abstract} logInfo(const std::string& message) : void
			+{abstract} logWarning(const std::string& message) : void
			+{abstract} shutdown() : void
			+{static} shutdownAll() : void
		}

		class Logger {
			+Logger(const std::string& scopeName, LogLevel logLevel)
			+~Logger()
			-m_logger : std::shared_ptr<spdlog::logger>
			-initLogger() : void
			+logCritical(const std::string& message) : void
			+logDebug(const std::string& message) : void
			+logError(const std::string& message) : void
			+logInfo(const std::string& message) : void
			+logWarning(const std::string& message) : void
			+shutdown() : void
			-shutdownOnSignal(int signal) : void
		}

		enum LogLevel {
			DEBUG
			ERROR
			INFO
			WARNING
		}
	}

	namespace GameObjects {
		class ILevelBuilder {
			+ILevelBuilder()
			+~ILevelBuilder()
			-m_level : std::unique_ptr<Level>
			+release() : std::unique_ptr<Level>
			#reset() : void
			#setBoard(std::unique_ptr<Level::Board_t> board) : void
		}

		class Level {
			+Level()
			+getBoard() : Board_t& {query}
			-m_levelState : LevelState
			+isReady() : bool {query}
			+setBoard(std::unique_ptr<Board_t> board) : bool
			-m_ghosts : std::vector<Entities::Ghost*>
			-m_pacMans : std::vector<Entities::PacMan*>
			-m_board : vector<std::vector<std::unique_ptr<Entities::IEntity>>>
		}

		class LevelBuilderFromFile {
			+LevelBuilderFromFile(const std::string& boardPath)
			-m_boardPath : const std::string&
			-m_logger : mutable Utils::Logger
			-createBoard() : std::unique_ptr<Level::Board_t> {query}
		}

		enum LevelState {
			NOT_READY
			READY
		}

		namespace Entities {
			class Empty {
				+Empty(uint32_t entityId)
			}

			class Entity <template<EntityType ENTITY_TYPE>> {
				+Entity(uint32_t entityId)
				+~Entity()
				+getEntityType() : EntityType {query}
				#m_entityType : const EntityType
			}

			class Food {
				+Food(uint32_t entityId)
			}

			class Ghost {
				+Ghost(uint32_t entityId)
			}

			abstract class IEntity {
				+IEntity(uint32_t entityId)
				+~IEntity()
				+{abstract} getEntityType() : EntityType {query}
				+operator<<(std::ostream& os, const IEntity& entity) : std :: ostream&
				+getEntityId() : uint32_t {query}
				#m_entityId : uint32_t
			}

			class PacMan {
				+PacMan(uint32_t entityId)
			}

			class SuperFood {
				+SuperFood(uint32_t entityId)
			}

			class Wall {
				+Wall(uint32_t entityId)
			}

			enum EntityType {
				BRIDGE
				EMPTY
				FOOD
				GHOST
				PAC_MAN
				SUPER_FOOD
				WALL
			}
		}
	}

	namespace GameLogic {
		class GameHandler {
			+GameHandler()
		}

		class GameRunner {
			+GameRunner(std::unique_ptr<GameObjects::Level> level)
			+startGame() : bool
			-m_level : std::unique_ptr<GameObjects::Level>
		}

		namespace GameEvents {
			enum ConnectionEvents {
			}

			enum GameEvent {
				ENTITY_COLLISION
				ENTITY_DEATH
				ENTITY_DIRECTION_CHANGE
				ENTITY_SPAWN
				ENTITY_STATE_CHANGE
				FOOD_EATEN
				GAME_CREATED
				GAME_OVER
				GAME_START
			}

			enum MessageSource {
				CLIENT
				SERVER
			}

			class MessageHeader {
				+event : GameEvent
				+source : MessageSource
			}

			class ServerMessageGameCreated {
				+level : GameObjects::Level
				+header : MessageHeader
				+header : MessageHeader
				+header : MessageHeader
			}

			class ServerMessageGameCreated::ServerMessageGameStarted {
				+header : MessageHeader
				+header : MessageHeader
				+header : MessageHeader
			}

			class ServerMessageGameCreated::ServerMessageGameStarted::ServerMessageGameEntityDeath {
				+header : MessageHeader
				+header : MessageHeader
				+header : MessageHeader
			}

			class ServerMessageGameCreated::ServerMessageGameStarted::ServerMessageGameEntityDeath::PlayerMessage {
				+header : MessageHeader
			}
		}
	}
}





/' Inheritance relationships '/

PacMan.GameObjects.Entities.Entity <|-- PacMan.GameObjects.Entities.Empty


PacMan.GameObjects.Entities.Entity <|-- PacMan.GameObjects.Entities.Food


PacMan.GameObjects.Entities.Entity <|-- PacMan.GameObjects.Entities.Ghost


PacMan.GameObjects.Entities.Entity <|-- PacMan.GameObjects.Entities.PacMan


PacMan.GameObjects.Entities.Entity <|-- PacMan.GameObjects.Entities.SuperFood


PacMan.GameObjects.Entities.Entity <|-- PacMan.GameObjects.Entities.Wall


PacMan.GameObjects.Entities.IEntity <|-- PacMan.GameObjects.Entities.Entity


PacMan.GameObjects.ILevelBuilder <|-- PacMan.GameObjects.LevelBuilderFromFile


PacMan.Utils.ILogger <|-- PacMan.Utils.Logger





/' Aggregation relationships '/

PacMan.GameObjects.Entities.Entity *-- PacMan.GameObjects.Entities.EntityType


PacMan.GameObjects.ILevelBuilder o-- PacMan.GameObjects.Level


PacMan.Utils.ILogger o-- PacMan.Utils.ILogger


PacMan.Utils.ILogger *-- PacMan.Utils.LogLevel


PacMan.GameObjects.Level *-- PacMan.GameObjects.LevelState


PacMan.GameLogic.GameEvents.MessageHeader *-- PacMan.GameLogic.GameEvents.GameEvent


PacMan.GameLogic.GameEvents.MessageHeader *-- PacMan.GameLogic.GameEvents.MessageSource


PacMan.GameLogic.GameEvents.ServerMessageGameCreated "3" *-- PacMan.GameLogic.GameEvents.MessageHeader


PacMan.GameLogic.GameEvents.ServerMessageGameCreated::ServerMessageGameStarted "3" *-- PacMan.GameLogic.GameEvents.MessageHeader


PacMan.GameLogic.GameEvents.ServerMessageGameCreated::ServerMessageGameStarted::ServerMessageGameEntityDeath "3" *-- PacMan.GameLogic.GameEvents.MessageHeader


PacMan.GameLogic.GameEvents.ServerMessageGameCreated::ServerMessageGameStarted::ServerMessageGameEntityDeath::PlayerMessage *-- PacMan.GameLogic.GameEvents.MessageHeader






/' Nested objects '/

PacMan.GameLogic.GameEvents.ServerMessageGameCreated +-- PacMan.GameLogic.GameEvents.ServerMessageGameCreated.ServerMessageGameStarted




@enduml
